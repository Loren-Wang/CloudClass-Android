task replaceRte {
    boolean a = project.hasProperty('USE_ARSENAL')
    logger.log(LogLevel.INFO, "parameter is not empty")
    if (a) {
        boolean tmp = Boolean.parseBoolean(USE_ARSENAL)
        logger.log(LogLevel.INFO, "parameter is " + a)
        updateEntry("useArsenal", tmp)
    } else {
        logger.log(LogLevel.ERROR, "parameter useArsenal is required")
        throw new StopExecutionException("parameter useArsenal is required")
    }
}

def updateEntry(key, value) {
    logger.log(LogLevel.WARN, "updateEntry->key:" + key + ", value:" + value.toString())
    File propFile = file("gradle.properties")
    if (propFile.exists()) {
        logger.log(LogLevel.INFO, "gradle.properties is exists")
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))
        logger.log(LogLevel.INFO, "open and load gradle.properties")
        if (!props.containsKey(key)) {
            logger.log(LogLevel.ERROR, "Property '" + key + "' does not exist in gradle.properties!")
        }
        logger.log(LogLevel.INFO, "ready update gradle.properties, [" + key + "]: " + value)
        props[key] = value.toString()
        propFile.setWritable(true)
        props.store(new FileOutputStream(propFile), "")
        logger.log(LogLevel.INFO, "update gradle.properties complete")
    } else {
        logger.log(LogLevel.ERROR, "gradle.properties not exists!")
    }
}


